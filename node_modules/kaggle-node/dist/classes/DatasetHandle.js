"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetHandle = void 0;
const constants_1 = require("../constants/constants");
class DatasetHandle {
    constructor(handleStr) {
        let segments = handleStr.split("/");
        switch (segments.length) {
            case 4:
                let ver = Number(segments[3]);
                if (isNaN(ver)) {
                    throw new Error("Version number is malformed.");
                }
                else {
                    this.version = ver;
                }
            case 2: {
                this.owner = segments[0];
                this.dataset = segments[1];
                break;
            }
            default: {
                throw new Error("Invalid handle string.");
            }
        }
    }
    getViewRoute() {
        return `datasets/view/${this.owner}/${this.dataset}`;
    }
    getListRoute() {
        return (`datasets/list/${this.owner}/${this.dataset}`
            + (this.version != null
                ? `?dataset_version_number=${this.version}`
                : ''));
    }
    getDownloadRoute(added) {
        let queryStr = Object.entries(Object.assign({ 'dataset_version_number': this.version }, (added !== null && added !== void 0 ? added : {}))).filter(([prop, val]) => val != undefined)
            .map(([prop, val]) => `${prop}=${val}`)
            .join("&");
        return (`datasets/download/${this.owner}/${this.dataset}`
            + (queryStr != ''
                ? '?' + queryStr
                : ''));
    }
    getDownloadUrl() {
        return `${constants_1.constants.baseUrl}/${constants_1.constants.apiPath}/${this.getDownloadRoute()}`;
    }
    getListUrl() {
        return `${constants_1.constants.baseUrl}/${constants_1.constants.apiPath}/${this.getListRoute()}`;
    }
    getViewUrl() {
        return `${constants_1.constants.baseUrl}/${constants_1.constants.apiPath}/${this.getViewRoute()}`;
    }
    getWebUrl() {
        return (`${constants_1.constants.baseUrl}/datasets/${this.owner}/${this.dataset}`
            + (this.version != null
                ? `/versions/${this.version}`
                : ''));
    }
}
exports.DatasetHandle = DatasetHandle;
//# sourceMappingURL=DatasetHandle.js.map